AWSTemplateFormatVersion: '2010-09-09'
Description: A highly secure VPC setup

Parameters:
  VpcCIDR:
    Description: VPC CIDR Block
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR block for the first public subnet
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: CIDR block for the second public subnet
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: CIDR block for the first private subnet
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: CIDR block for the second private subnet
    Type: String
    Default: 10.0.4.0/24
  PublicSecurityGroupIngressCIDR:
    Description: CIDR for Ingress traffic for Public Subnets
    Type: String
    Default: 0.0.0.0/0

  PrivateSecurityGroupIngressCIDR:
    Description: CIDR for Ingress traffic within VPC and to NAT Gateway
    Type: String
    Default: 10.0.0.0/16

  PublicNACLIngressCIDR:
    Description: CIDR for NACL Ingress traffic for Public Subnets
    Type: String
    Default: 0.0.0.0/0

  PublicNACLEgressCIDR:
    Description: CIDR for NACL Egress traffic for Public Subnets
    Type: String
    Default: 0.0.0.0/0
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1CIDR

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2CIDR

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic for public subnets
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: !Ref PublicSecurityGroupIngressCIDR
          IpProtocol: '-1'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic within VPC and to NAT Gateway
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: !Ref PrivateSecurityGroupIngressCIDR
          IpProtocol: '-1'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  PublicSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC

  PublicSubnetNACLEntryIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 100
      Protocol: '-1'
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref PublicNACLIngressCIDR

  PublicSubnetNACLEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      RuleNumber: 100
      Protocol: '-1'
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref PublicNACLEgressCIDR
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref MyVPC
  PublicSubnet1Id:
    Description: First Public Subnet ID
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Description: Second Public Subnet ID
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Description: First Private Subnet ID
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: Second Private Subnet ID
    Value: !Ref PrivateSubnet2
  InternetGatewayId:
    Description: Internet Gateway ID
    Value: !Ref InternetGateway
  NatGatewayId:
    Description: NAT Gateway ID
    Value: !Ref NatGateway
